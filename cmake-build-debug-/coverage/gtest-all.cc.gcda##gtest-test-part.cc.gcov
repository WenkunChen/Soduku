        -:    0:Source:D:/IDE/CLion 2023.1.4/workspace/sudoku/googletest/googletest/src/gtest-test-part.cc
        -:    0:Graph:D:\IDE\CLion 2023.1.4\workspace\sudoku\cmake-build-debug-\googletest\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\IDE\CLion 2023.1.4\workspace\sudoku\cmake-build-debug-\googletest\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest-test-part.h"
        -:   34:#include "src/gtest-internal-inl.h"
        -:   35:
        -:   36:namespace testing {
        -:   37:
        -:   38:using internal::GetUnitTestImpl;
        -:   39:
        -:   40:// Gets the summary of the failure message by omitting the stack trace
        -:   41:// in it.
function _ZN7testing14TestPartResult14ExtractSummaryB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####:   42:std::string TestPartResult::ExtractSummary(const char* message) {
    #####:   43:  const char* const stack_trace = strstr(message, internal::kStackTraceMarker);
        -:   44:  return stack_trace == NULL ? message :
    #####:   45:      std::string(message, stack_trace);
    %%%%%:   45-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   45-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   45-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   45-block  3
branch 10 never executed
branch 11 never executed
    %%%%%:   45-block  4
call   12 never executed
    %%%%%:   45-block  5
branch 13 never executed
branch 14 never executed
    %%%%%:   45-block  6
call   15 never executed
    %%%%%:   45-block  7
    %%%%%:   45-block  8
    $$$$$:   45-block  9
branch 16 never executed
branch 17 never executed
    $$$$$:   45-block 10
call   18 never executed
    $$$$$:   45-block 11
    $$$$$:   45-block 12
branch 19 never executed
branch 20 never executed
    $$$$$:   45-block 13
call   21 never executed
        -:   46:}
        -:   47:
        -:   48:// Prints a TestPartResult object.
function _ZN7testinglsERSoRKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   49:std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {
        -:   50:  return os
    #####:   51:      << result.file_name() << ":" << result.line_number() << ": "
    %%%%%:   51-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   52:      << (result.type() == TestPartResult::kSuccess ? "Success" :
    #####:   53:          result.type() == TestPartResult::kFatalFailure ? "Fatal failure" :
    %%%%%:   53-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   53-block  1
    %%%%%:   53-block  2
        -:   54:          "Non-fatal failure") << ":\n"
    #####:   55:      << result.message() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   55-block  0
    %%%%%:   55-block  1
    %%%%%:   55-block  2
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:   56:}
        -:   57:
        -:   58:// Appends a TestPartResult to the array.
function _ZN7testing19TestPartResultArray6AppendERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   59:void TestPartResultArray::Append(const TestPartResult& result) {
    #####:   60:  array_.push_back(result);
    %%%%%:   60-block  0
call    0 never executed
    #####:   61:}
        -:   62:
        -:   63:// Returns the TestPartResult at the given index (0-based).
function _ZNK7testing19TestPartResultArray17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####:   64:const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {
    #####:   65:  if (index < 0 || index >= size()) {
    %%%%%:   65-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   65-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   65-block  2
    %%%%%:   65-block  3
    %%%%%:   65-block  4
branch  5 never executed
branch  6 never executed
    #####:   66:    printf("\nInvalid index (%d) into TestPartResultArray.\n", index);
    %%%%%:   66-block  0
call    0 never executed
    #####:   67:    internal::posix::Abort();
call    0 never executed
        -:   68:  }
        -:   69:
    #####:   70:  return array_[index];
    %%%%%:   70-block  0
call    0 never executed
        -:   71:}
        -:   72:
        -:   73:// Returns the number of TestPartResult objects in the array.
function _ZNK7testing19TestPartResultArray4sizeEv called 0 returned 0% blocks executed 0%
    #####:   74:int TestPartResultArray::size() const {
    #####:   75:  return static_cast<int>(array_.size());
    %%%%%:   75-block  0
call    0 never executed
        -:   76:}
        -:   77:
        -:   78:namespace internal {
        -:   79:
function _ZN7testing8internal24HasNewFatalFailureHelperC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:HasNewFatalFailureHelper::HasNewFatalFailureHelper()
    #####:   81:    : has_new_fatal_failure_(false),
    #####:   82:      original_reporter_(GetUnitTestImpl()->
    #####:   83:                         GetTestPartResultReporterForCurrentThread()) {
    %%%%%:   83-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   83-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   84:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(this);
    %%%%%:   84-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   84-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   85:}
    %%%%%:   85-block  0
    $$$$$:   85-block  1
call    0 never executed
        -:   86:
    #####:   87:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
    #####:   88:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        -:   89:      original_reporter_);
    #####:   90:}
------------------
_ZN7testing8internal24HasNewFatalFailureHelperD0Ev:
function _ZN7testing8internal24HasNewFatalFailureHelperD0Ev called 0 returned 0% blocks executed 0%
    #####:   87:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
        -:   88:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        -:   89:      original_reporter_);
    #####:   90:}
    %%%%%:   90-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal24HasNewFatalFailureHelperD2Ev:
function _ZN7testing8internal24HasNewFatalFailureHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:   87:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
    #####:   88:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
    %%%%%:   88-block  0
call    0 never executed
call    1 never executed
        -:   89:      original_reporter_);
    #####:   90:}
call    0 never executed
------------------
        -:   91:
function _ZN7testing8internal24HasNewFatalFailureHelper20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   92:void HasNewFatalFailureHelper::ReportTestPartResult(
        -:   93:    const TestPartResult& result) {
    #####:   94:  if (result.fatally_failed())
    %%%%%:   94-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:    has_new_fatal_failure_ = true;
    %%%%%:   95-block  0
    #####:   96:  original_reporter_->ReportTestPartResult(result);
    %%%%%:   96-block  0
call    0 never executed
    #####:   97:}
        -:   98:
        -:   99:}  // namespace internal
        -:  100:
        -:  101:}  // namespace testing
